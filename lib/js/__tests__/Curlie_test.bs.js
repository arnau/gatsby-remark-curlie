// Generated by BUCKLESCRIPT VERSION 4.0.5, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("@glennsl/bs-jest/lib/js/src/jest.js");
var Curlie$GatsbyRemarkCurlie = require("../src/Curlie.bs.js");

describe("Curlie.fromString", (function () {
        Jest.test("full", (function () {
                return Jest.Expect[/* toEqual */12](/* tuple */[
                            "foo",
                            "bar"
                          ], Jest.Expect[/* expect */0](Curlie$GatsbyRemarkCurlie.fromString("foo:bar")));
              }));
        Jest.test("full single char", (function () {
                return Jest.Expect[/* toEqual */12](/* tuple */[
                            "foo",
                            "b"
                          ], Jest.Expect[/* expect */0](Curlie$GatsbyRemarkCurlie.fromString("foo:b")));
              }));
        Jest.test("full with /", (function () {
                return Jest.Expect[/* toEqual */12](/* tuple */[
                            "foo",
                            "bar/qux"
                          ], Jest.Expect[/* expect */0](Curlie$GatsbyRemarkCurlie.fromString("foo:bar/qux")));
              }));
        Jest.test("full with :", (function () {
                return Jest.Expect[/* toEqual */12](/* tuple */[
                            "foo",
                            "bar:qux"
                          ], Jest.Expect[/* expect */0](Curlie$GatsbyRemarkCurlie.fromString("foo:bar:qux")));
              }));
        Jest.test("full single /", (function () {
                return Jest.Expect[/* toEqual */12](/* tuple */[
                            "foo",
                            "/"
                          ], Jest.Expect[/* expect */0](Curlie$GatsbyRemarkCurlie.fromString("foo:/")));
              }));
        Jest.test("no path", (function () {
                return Jest.Expect[/* toEqual */12](/* tuple */[
                            "example",
                            undefined
                          ], Jest.Expect[/* expect */0](Curlie$GatsbyRemarkCurlie.fromString("example:")));
              }));
        Jest.test("not curlie", (function () {
                return Jest.Expect[/* toEqual */12](undefined, Jest.Expect[/* expect */0](Curlie$GatsbyRemarkCurlie.fromString("example")));
              }));
        Jest.test("bad prefix", (function () {
                return Jest.Expect[/* toEqual */12](undefined, Jest.Expect[/* expect */0](Curlie$GatsbyRemarkCurlie.fromString("a/b:bar")));
              }));
        return Jest.test("a URL", (function () {
                      return Jest.Expect[/* toEqual */12](undefined, Jest.Expect[/* expect */0](Curlie$GatsbyRemarkCurlie.fromString("https://example.org")));
                    }));
      }));

describe("Curlie.expand", (function () {
        var catalogue = /* :: */[
          /* record */[
            /* prefix */"example",
            /* url */"https://example.org/"
          ],
          /* [] */0
        ];
        Jest.test("partial", (function () {
                return Jest.Expect[/* toEqual */12]("https://example.org/", Jest.Expect[/* expect */0](Curlie$GatsbyRemarkCurlie.expand(/* tuple */[
                                    "example",
                                    undefined
                                  ], catalogue)));
              }));
        Jest.test("full", (function () {
                return Jest.Expect[/* toEqual */12]("https://example.org/bar", Jest.Expect[/* expect */0](Curlie$GatsbyRemarkCurlie.expand(/* tuple */[
                                    "example",
                                    "bar"
                                  ], catalogue)));
              }));
        return Jest.test("not found", (function () {
                      return Jest.Expect[/* toEqual */12](undefined, Jest.Expect[/* expect */0](Curlie$GatsbyRemarkCurlie.expand(/* tuple */[
                                          "example2",
                                          undefined
                                        ], catalogue)));
                    }));
      }));

/*  Not a pure module */
