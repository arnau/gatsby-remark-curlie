// Generated by BUCKLESCRIPT VERSION 4.0.5, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");
var UnistUtilVisit = require("unist-util-visit");
var Curlie$GatsbyRemarkCurlie = require("./Curlie.bs.js");

var MappingNotFound = Caml_exceptions.create("RemarkCurlie-GatsbyRemarkCurlie.MappingNotFound");

function toMapping(record) {
  return /* record */[
          /* prefix */record.id,
          /* url */record.url
        ];
}

function bibToString(record) {
  var id = record.id;
  var title = record.title;
  var publisher = record.publisher;
  var published = record.published;
  var joinAuthors = function (authors) {
    if (authors !== undefined) {
      var authors$1 = authors;
      if (authors$1.length === 0) {
        return undefined;
      } else {
        return $$Array.fold_left((function (acc, value) {
                      return acc + (", " + value);
                    }), "", authors$1);
      }
    }
    
  };
  var authors = joinAuthors(record.authors);
  return List.fold_left((function (acc, value) {
                if (value !== undefined) {
                  return acc + (" " + (value + "."));
                } else {
                  return acc;
                }
              }), "[" + (id + "]"), /* :: */[
              title,
              /* :: */[
                authors,
                /* :: */[
                  published,
                  /* :: */[
                    publisher,
                    /* [] */0
                  ]
                ]
              ]
            ]);
}

function $$default(ast, config) {
  var db = config.db;
  var mappings = List.map(toMapping, db);
  var visitor = function (node) {
    var href = node.url;
    var curlie = Curlie$GatsbyRemarkCurlie.fromString(href);
    if (curlie !== undefined) {
      var curlie$1 = curlie;
      var match = Curlie$GatsbyRemarkCurlie.expand(curlie$1, mappings);
      if (match !== undefined) {
        var prefix = curlie$1[0];
        var bib = List.find((function (record) {
                return record.id === prefix;
              }), db);
        node.url = match;
        node.title = bibToString(bib);
        return /* () */0;
      } else {
        throw [
              MappingNotFound,
              "Found a curlie " + (href + " without an entry in the catalogue.")
            ];
      }
    } else {
      return /* () */0;
    }
  };
  UnistUtilVisit(ast, "link", visitor);
  return ast;
}

exports.MappingNotFound = MappingNotFound;
exports.toMapping = toMapping;
exports.bibToString = bibToString;
exports.$$default = $$default;
exports.default = $$default;
exports.__esModule = true;
/* unist-util-visit Not a pure module */
